//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
mod provides;
mod requires;

use crate::{
    generated::{
        EntityDefinition, EntityDefinitionId, InputValueDefinition, InputValueDefinitionId, ResolverDefinition,
        ResolverDefinitionId, Subgraph, SubgraphId, Type, TypeRecord, TypeSystemDirective, TypeSystemDirectiveId,
    },
    prelude::*,
    StringId,
};
pub use provides::*;
use readable::{Iter, Readable};
pub use requires::*;

#[derive(serde::Serialize, serde::Deserialize)]
pub struct FieldDefinitionRecord {
    pub name_id: StringId,
    pub description_id: Option<StringId>,
    pub parent_entity_id: EntityDefinitionId,
    pub ty: TypeRecord,
    pub resolver_ids: Vec<ResolverDefinitionId>,
    /// By default a field is considered shared and providable by *any* subgraph that exposes it.
    /// It's up to the composition to ensure it. If this field is specific to some subgraphs, they
    /// will be specified in this Vec.
    pub only_resolvable_in_ids: Vec<SubgraphId>,
    pub requires: Vec<FieldRequiresRecord>,
    pub provides: Vec<FieldProvidesRecord>,
    /// The arguments referenced by this range are sorted by their name (string)
    pub argument_ids: IdRange<InputValueDefinitionId>,
    pub directive_ids: Vec<TypeSystemDirectiveId>,
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Hash, serde::Serialize, serde::Deserialize, id_derives::Id)]
#[max(MAX_ID)]
pub struct FieldDefinitionId(std::num::NonZero<u32>);

#[derive(Clone, Copy)]
pub struct FieldDefinition<'a> {
    schema: &'a Schema,
    id: FieldDefinitionId,
}

impl<'a> FieldDefinition<'a> {
    #[allow(clippy::should_implement_trait)]
    pub fn as_ref(&self) -> &'a FieldDefinitionRecord {
        &self.schema[self.id]
    }
    pub fn id(&self) -> FieldDefinitionId {
        self.id
    }
    pub fn name(&self) -> &'a str {
        &self.schema[self.as_ref().name_id]
    }
    pub fn description(&self) -> Option<&'a str> {
        self.as_ref().description_id.map(|id| self.schema[id].as_ref())
    }
    pub fn parent_entity(&self) -> EntityDefinition<'a> {
        self.as_ref().parent_entity_id.read(self.schema)
    }
    pub fn ty(&self) -> Type<'a> {
        self.as_ref().ty.read(self.schema)
    }
    pub fn resolvers(&self) -> impl Iter<Item = ResolverDefinition<'a>> + 'a {
        self.as_ref().resolver_ids.read(self.schema)
    }
    pub fn only_resolvable_in(&self) -> impl Iter<Item = Subgraph<'a>> + 'a {
        self.as_ref().only_resolvable_in_ids.read(self.schema)
    }
    pub fn requires(&self) -> impl Iter<Item = FieldRequires<'a>> + 'a {
        self.as_ref().requires.read(self.schema)
    }
    pub fn provides(&self) -> impl Iter<Item = FieldProvides<'a>> + 'a {
        self.as_ref().provides.read(self.schema)
    }
    pub fn arguments(&self) -> impl Iter<Item = InputValueDefinition<'a>> + 'a {
        self.as_ref().argument_ids.read(self.schema)
    }
    pub fn directives(&self) -> impl Iter<Item = TypeSystemDirective<'a>> + 'a {
        self.as_ref().directive_ids.read(self.schema)
    }
}

impl Readable<Schema> for FieldDefinitionId {
    type Reader<'a> = FieldDefinition<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        FieldDefinition { schema, id: self }
    }
}

impl std::fmt::Debug for FieldDefinition<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("FieldDefinition")
            .field("name", &self.name())
            .field("description", &self.description())
            .field("parent_entity", &self.parent_entity())
            .field("ty", &self.ty())
            .field("resolvers", &self.resolvers())
            .field("only_resolvable_in", &self.only_resolvable_in())
            .field("requires", &self.requires())
            .field("provides", &self.provides())
            .field("arguments", &self.arguments())
            .field("directives", &self.directives())
            .finish()
    }
}