//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
use crate::{
    generated::{NameOrPattern, NameOrPatternId},
    prelude::*,
    StringId,
};
use readable::Readable;

#[derive(serde::Serialize, serde::Deserialize, Clone, Copy)]
pub struct ForwardHeaderRuleRecord {
    pub name_id: NameOrPatternId,
    pub default_id: Option<StringId>,
    pub rename_id: Option<StringId>,
}

#[derive(Clone, Copy)]
pub struct ForwardHeaderRule<'a> {
    schema: &'a Schema,
    item: ForwardHeaderRuleRecord,
}

impl<'a> ForwardHeaderRule<'a> {
    #[allow(clippy::should_implement_trait)]
    pub fn as_ref(&self) -> &ForwardHeaderRuleRecord {
        &self.item
    }
    pub fn name(&self) -> NameOrPattern<'a> {
        self.as_ref().name_id.read(self.schema)
    }
    pub fn default(&self) -> Option<&'a str> {
        self.as_ref().default_id.map(|id| self.schema[id].as_ref())
    }
    pub fn rename(&self) -> Option<&'a str> {
        self.as_ref().rename_id.map(|id| self.schema[id].as_ref())
    }
}

impl Readable<Schema> for ForwardHeaderRuleRecord {
    type Reader<'a> = ForwardHeaderRule<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        ForwardHeaderRule { schema, item: self }
    }
}

impl std::fmt::Debug for ForwardHeaderRule<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ForwardHeaderRule")
            .field("name", &self.name())
            .field("default", &self.default())
            .field("rename", &self.rename())
            .finish()
    }
}