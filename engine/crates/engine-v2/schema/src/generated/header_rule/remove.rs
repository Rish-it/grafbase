//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
use crate::{
    generated::{NameOrPattern, NameOrPatternId},
    prelude::*,
};
use readable::Readable;

#[derive(serde::Serialize, serde::Deserialize, Clone, Copy)]
pub struct RemoveHeaderRuleRecord {
    pub name_id: NameOrPatternId,
}

#[derive(Clone, Copy)]
pub struct RemoveHeaderRule<'a> {
    schema: &'a Schema,
    item: RemoveHeaderRuleRecord,
}

impl<'a> RemoveHeaderRule<'a> {
    #[allow(clippy::should_implement_trait)]
    pub fn as_ref(&self) -> &RemoveHeaderRuleRecord {
        &self.item
    }
    pub fn name(&self) -> NameOrPattern<'a> {
        self.as_ref().name_id.read(self.schema)
    }
}

impl Readable<Schema> for RemoveHeaderRuleRecord {
    type Reader<'a> = RemoveHeaderRule<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        RemoveHeaderRule { schema, item: self }
    }
}

impl std::fmt::Debug for RemoveHeaderRule<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("RemoveHeaderRule").field("name", &self.name()).finish()
    }
}