//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
use crate::{prelude::*, StringId};
use readable::Readable;

#[derive(serde::Serialize, serde::Deserialize, Clone, Copy)]
pub struct InsertHeaderRuleRecord {
    pub name_id: StringId,
    pub value_id: StringId,
}

#[derive(Clone, Copy)]
pub struct InsertHeaderRule<'a> {
    schema: &'a Schema,
    item: InsertHeaderRuleRecord,
}

impl<'a> InsertHeaderRule<'a> {
    #[allow(clippy::should_implement_trait)]
    pub fn as_ref(&self) -> &InsertHeaderRuleRecord {
        &self.item
    }
    pub fn name(&self) -> &'a str {
        &self.schema[self.as_ref().name_id]
    }
    pub fn value(&self) -> &'a str {
        &self.schema[self.as_ref().value_id]
    }
}

impl Readable<Schema> for InsertHeaderRuleRecord {
    type Reader<'a> = InsertHeaderRule<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        InsertHeaderRule { schema, item: self }
    }
}

impl std::fmt::Debug for InsertHeaderRule<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("InsertHeaderRule")
            .field("name", &self.name())
            .field("value", &self.value())
            .finish()
    }
}