//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
use crate::{
    generated::{InterfaceDefinition, InterfaceDefinitionId, ObjectDefinition, ObjectDefinitionId},
    prelude::*,
};
use readable::Readable;

#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum EntityDefinitionId {
    Interface(InterfaceDefinitionId),
    Object(ObjectDefinitionId),
}

impl From<InterfaceDefinitionId> for EntityDefinitionId {
    fn from(value: InterfaceDefinitionId) -> Self {
        EntityDefinitionId::Interface(value)
    }
}
impl From<ObjectDefinitionId> for EntityDefinitionId {
    fn from(value: ObjectDefinitionId) -> Self {
        EntityDefinitionId::Object(value)
    }
}

#[derive(Clone, Copy, Debug)]
pub enum EntityDefinition<'a> {
    Interface(InterfaceDefinition<'a>),
    Object(ObjectDefinition<'a>),
}

impl Readable<Schema> for EntityDefinitionId {
    type Reader<'a> = EntityDefinition<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        match self {
            EntityDefinitionId::Interface(id) => EntityDefinition::Interface(id.read(schema)),
            EntityDefinitionId::Object(id) => EntityDefinition::Object(id.read(schema)),
        }
    }
}