//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
use crate::{
    generated::{GraphqlEndpoint, GraphqlEndpointId},
    prelude::*,
    RequiredFieldSetId,
};
use readable::Readable;

#[derive(serde::Serialize, serde::Deserialize, Clone, Copy)]
pub struct GraphqlFederationEntityResolverDefinitionRecord {
    pub endpoint_id: GraphqlEndpointId,
    pub key_fields_id: RequiredFieldSetId,
}

#[derive(Clone, Copy)]
pub struct GraphqlFederationEntityResolverDefinition<'a> {
    schema: &'a Schema,
    item: GraphqlFederationEntityResolverDefinitionRecord,
}

impl<'a> GraphqlFederationEntityResolverDefinition<'a> {
    #[allow(clippy::should_implement_trait)]
    pub fn as_ref(&self) -> &GraphqlFederationEntityResolverDefinitionRecord {
        &self.item
    }
    pub fn endpoint(&self) -> GraphqlEndpoint<'a> {
        self.as_ref().endpoint_id.read(self.schema)
    }
    pub fn key_fields(&self) -> &'a RequiredFieldSet {
        &self.schema[self.as_ref().key_fields_id]
    }
}

impl Readable<Schema> for GraphqlFederationEntityResolverDefinitionRecord {
    type Reader<'a> = GraphqlFederationEntityResolverDefinition<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        GraphqlFederationEntityResolverDefinition { schema, item: self }
    }
}

impl std::fmt::Debug for GraphqlFederationEntityResolverDefinition<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GraphqlFederationEntityResolverDefinition")
            .field("endpoint", &self.endpoint())
            .field("key_fields", &self.key_fields())
            .finish()
    }
}

#[derive(serde::Serialize, serde::Deserialize, Clone, Copy)]
pub struct GraphqlRootFieldResolverDefinitionRecord {
    pub endpoint_id: GraphqlEndpointId,
}

#[derive(Clone, Copy)]
pub struct GraphqlRootFieldResolverDefinition<'a> {
    schema: &'a Schema,
    item: GraphqlRootFieldResolverDefinitionRecord,
}

impl<'a> GraphqlRootFieldResolverDefinition<'a> {
    #[allow(clippy::should_implement_trait)]
    pub fn as_ref(&self) -> &GraphqlRootFieldResolverDefinitionRecord {
        &self.item
    }
    pub fn endpoint(&self) -> GraphqlEndpoint<'a> {
        self.as_ref().endpoint_id.read(self.schema)
    }
}

impl Readable<Schema> for GraphqlRootFieldResolverDefinitionRecord {
    type Reader<'a> = GraphqlRootFieldResolverDefinition<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        GraphqlRootFieldResolverDefinition { schema, item: self }
    }
}

impl std::fmt::Debug for GraphqlRootFieldResolverDefinition<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GraphqlRootFieldResolverDefinition")
            .field("endpoint", &self.endpoint())
            .finish()
    }
}