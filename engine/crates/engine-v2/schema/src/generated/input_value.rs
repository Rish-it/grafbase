//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
use crate::{
    generated::{Type, TypeRecord, TypeSystemDirective, TypeSystemDirectiveId},
    prelude::*,
    SchemaInputValue, SchemaInputValueId, StringId,
};
use readable::{Iter, Readable};

#[derive(serde::Serialize, serde::Deserialize)]
pub struct InputValueDefinitionRecord {
    pub name_id: StringId,
    pub description_id: Option<StringId>,
    pub ty: TypeRecord,
    pub default_value_id: Option<SchemaInputValueId>,
    pub directive_ids: Vec<TypeSystemDirectiveId>,
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Hash, serde::Serialize, serde::Deserialize, id_derives::Id)]
#[max(MAX_ID)]
pub struct InputValueDefinitionId(std::num::NonZero<u32>);

#[derive(Clone, Copy)]
pub struct InputValueDefinition<'a> {
    schema: &'a Schema,
    id: InputValueDefinitionId,
}

impl<'a> InputValueDefinition<'a> {
    #[allow(clippy::should_implement_trait)]
    pub fn as_ref(&self) -> &'a InputValueDefinitionRecord {
        &self.schema[self.id]
    }
    pub fn id(&self) -> InputValueDefinitionId {
        self.id
    }
    pub fn name(&self) -> &'a str {
        &self.schema[self.as_ref().name_id]
    }
    pub fn description(&self) -> Option<&'a str> {
        self.as_ref().description_id.map(|id| self.schema[id].as_ref())
    }
    pub fn ty(&self) -> Type<'a> {
        self.as_ref().ty.read(self.schema)
    }
    pub fn default_value(&self) -> Option<SchemaInputValue<'a>> {
        self.as_ref().default_value_id.as_ref().read(self.schema)
    }
    pub fn directives(&self) -> impl Iter<Item = TypeSystemDirective<'a>> + 'a {
        self.as_ref().directive_ids.read(self.schema)
    }
}

impl Readable<Schema> for InputValueDefinitionId {
    type Reader<'a> = InputValueDefinition<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        InputValueDefinition { schema, id: self }
    }
}

impl std::fmt::Debug for InputValueDefinition<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("InputValueDefinition")
            .field("name", &self.name())
            .field("description", &self.description())
            .field("ty", &self.ty())
            .field("default_value", &self.default_value())
            .field("directives", &self.directives())
            .finish()
    }
}