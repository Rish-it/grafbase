//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
use crate::{
    generated::{Definition, DefinitionId},
    prelude::*,
    Wrapping,
};
use readable::Readable;

#[derive(serde::Serialize, serde::Deserialize, Clone, Copy)]
pub struct TypeRecord {
    pub definition_id: DefinitionId,
    pub wrapping: Wrapping,
}

#[derive(Clone, Copy)]
pub struct Type<'a> {
    schema: &'a Schema,
    item: TypeRecord,
}

impl<'a> Type<'a> {
    #[allow(clippy::should_implement_trait)]
    pub fn as_ref(&self) -> &TypeRecord {
        &self.item
    }
    pub fn definition(&self) -> Definition<'a> {
        self.as_ref().definition_id.read(self.schema)
    }
    pub fn wrapping(&self) -> Wrapping {
        self.as_ref().wrapping
    }
}

impl Readable<Schema> for TypeRecord {
    type Reader<'a> = Type<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        Type { schema, item: self }
    }
}

impl std::fmt::Debug for Type<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("Type")
            .field("definition", &self.definition())
            .field("wrapping", &self.wrapping())
            .finish()
    }
}