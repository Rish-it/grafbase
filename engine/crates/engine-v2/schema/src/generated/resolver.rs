//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
mod graphql;

use crate::prelude::*;
pub use graphql::*;
use readable::Readable;

#[derive(serde::Serialize, serde::Deserialize)]
pub enum ResolverDefinitionRecord {
    GraphqlFederationEntity(GraphqlFederationEntityResolverDefinitionRecord),
    GraphqlRootField(GraphqlRootFieldResolverDefinitionRecord),
    Introspection,
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Hash, serde::Serialize, serde::Deserialize, id_derives::Id)]
#[max(MAX_ID)]
pub struct ResolverDefinitionId(std::num::NonZero<u32>);

#[derive(Clone, Copy, Debug)]
pub enum ResolverDefinition<'a> {
    GraphqlFederationEntity(GraphqlFederationEntityResolverDefinition<'a>),
    GraphqlRootField(GraphqlRootFieldResolverDefinition<'a>),
    Introspection,
}

impl Readable<Schema> for ResolverDefinitionId {
    type Reader<'a> = ResolverDefinition<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        match schema[self] {
            ResolverDefinitionRecord::GraphqlFederationEntity(item) => {
                ResolverDefinition::GraphqlFederationEntity(item.read(schema))
            }
            ResolverDefinitionRecord::GraphqlRootField(item) => ResolverDefinition::GraphqlRootField(item.read(schema)),
            ResolverDefinitionRecord::Introspection => ResolverDefinition::Introspection,
        }
    }
}