//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
use crate::{
    generated::{
        EnumDefinition, EnumDefinitionId, InputObjectDefinition, InputObjectDefinitionId, InterfaceDefinition,
        InterfaceDefinitionId, ObjectDefinition, ObjectDefinitionId, ScalarDefinition, ScalarDefinitionId,
        UnionDefinition, UnionDefinitionId,
    },
    prelude::*,
};
use readable::Readable;

#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum DefinitionId {
    Enum(EnumDefinitionId),
    InputObject(InputObjectDefinitionId),
    Interface(InterfaceDefinitionId),
    Object(ObjectDefinitionId),
    Scalar(ScalarDefinitionId),
    Union(UnionDefinitionId),
}

impl From<EnumDefinitionId> for DefinitionId {
    fn from(value: EnumDefinitionId) -> Self {
        DefinitionId::Enum(value)
    }
}
impl From<InputObjectDefinitionId> for DefinitionId {
    fn from(value: InputObjectDefinitionId) -> Self {
        DefinitionId::InputObject(value)
    }
}
impl From<InterfaceDefinitionId> for DefinitionId {
    fn from(value: InterfaceDefinitionId) -> Self {
        DefinitionId::Interface(value)
    }
}
impl From<ObjectDefinitionId> for DefinitionId {
    fn from(value: ObjectDefinitionId) -> Self {
        DefinitionId::Object(value)
    }
}
impl From<ScalarDefinitionId> for DefinitionId {
    fn from(value: ScalarDefinitionId) -> Self {
        DefinitionId::Scalar(value)
    }
}
impl From<UnionDefinitionId> for DefinitionId {
    fn from(value: UnionDefinitionId) -> Self {
        DefinitionId::Union(value)
    }
}

#[derive(Clone, Copy, Debug)]
pub enum Definition<'a> {
    Enum(EnumDefinition<'a>),
    InputObject(InputObjectDefinition<'a>),
    Interface(InterfaceDefinition<'a>),
    Object(ObjectDefinition<'a>),
    Scalar(ScalarDefinition<'a>),
    Union(UnionDefinition<'a>),
}

impl Readable<Schema> for DefinitionId {
    type Reader<'a> = Definition<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        match self {
            DefinitionId::Enum(id) => Definition::Enum(id.read(schema)),
            DefinitionId::InputObject(id) => Definition::InputObject(id.read(schema)),
            DefinitionId::Interface(id) => Definition::Interface(id.read(schema)),
            DefinitionId::Object(id) => Definition::Object(id.read(schema)),
            DefinitionId::Scalar(id) => Definition::Scalar(id.read(schema)),
            DefinitionId::Union(id) => Definition::Union(id.read(schema)),
        }
    }
}