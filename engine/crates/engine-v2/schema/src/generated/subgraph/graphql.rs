//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
use crate::{
    generated::{HeaderRule, HeaderRuleId},
    prelude::*,
    StringId, SubgraphConfig, UrlId,
};
use readable::{Iter, Readable};

#[derive(serde::Serialize, serde::Deserialize)]
pub struct GraphqlEndpointRecord {
    pub subgraph_name_id: StringId,
    pub url_id: UrlId,
    pub websocket_url_id: Option<UrlId>,
    pub header_rule_ids: Vec<HeaderRuleId>,
    pub config: SubgraphConfig,
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Hash, serde::Serialize, serde::Deserialize, id_derives::Id)]
#[max(MAX_ID)]
pub struct GraphqlEndpointId(std::num::NonZero<u32>);

#[derive(Clone, Copy)]
pub struct GraphqlEndpoint<'a> {
    schema: &'a Schema,
    id: GraphqlEndpointId,
}

impl<'a> GraphqlEndpoint<'a> {
    #[allow(clippy::should_implement_trait)]
    pub fn as_ref(&self) -> &'a GraphqlEndpointRecord {
        &self.schema[self.id]
    }
    pub fn id(&self) -> GraphqlEndpointId {
        self.id
    }
    pub fn subgraph_name(&self) -> &'a str {
        &self.schema[self.as_ref().subgraph_name_id]
    }
    pub fn url(&self) -> &'a Url {
        &self.schema[self.as_ref().url_id]
    }
    pub fn websocket_url(&self) -> Option<&'a Url> {
        self.as_ref().websocket_url_id.map(|id| &self.schema[id])
    }
    pub fn header_rules(&self) -> impl Iter<Item = HeaderRule<'a>> + 'a {
        self.as_ref().header_rule_ids.read(self.schema)
    }
    pub fn config(&self) -> &'a SubgraphConfig {
        &self.as_ref().config
    }
}

impl Readable<Schema> for GraphqlEndpointId {
    type Reader<'a> = GraphqlEndpoint<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        GraphqlEndpoint { schema, id: self }
    }
}

impl std::fmt::Debug for GraphqlEndpoint<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("GraphqlEndpoint")
            .field("subgraph_name", &self.subgraph_name())
            .field("url", &self.url())
            .field("websocket_url", &self.websocket_url())
            .field("header_rules", &self.header_rules())
            .field("config", &self.config())
            .finish()
    }
}