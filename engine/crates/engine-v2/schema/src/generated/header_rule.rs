//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
mod forward;
mod insert;
mod remove;
mod rename_duplicate;

use crate::{prelude::*, RegexId, StringId};
pub use forward::*;
pub use insert::*;
use readable::Readable;
pub use remove::*;
pub use rename_duplicate::*;

#[derive(serde::Serialize, serde::Deserialize, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum NameOrPatternId {
    Name(StringId),
    Pattern(RegexId),
}

impl From<StringId> for NameOrPatternId {
    fn from(value: StringId) -> Self {
        NameOrPatternId::Name(value)
    }
}
impl From<RegexId> for NameOrPatternId {
    fn from(value: RegexId) -> Self {
        NameOrPatternId::Pattern(value)
    }
}

#[derive(Clone, Copy, Debug)]
pub enum NameOrPattern<'a> {
    Name(&'a str),
    Pattern(&'a Regex),
}

impl Readable<Schema> for NameOrPatternId {
    type Reader<'a> = NameOrPattern<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        match self {
            NameOrPatternId::Name(id) => NameOrPattern::Name(&schema[id]),
            NameOrPatternId::Pattern(id) => NameOrPattern::Pattern(&schema[id]),
        }
    }
}

#[derive(serde::Serialize, serde::Deserialize)]
pub enum HeaderRuleRecord {
    Forward(ForwardHeaderRuleRecord),
    Insert(InsertHeaderRuleRecord),
    Remove(RemoveHeaderRuleRecord),
    RenameDuplicate(RenameDuplicateHeaderRuleRecord),
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Hash, serde::Serialize, serde::Deserialize, id_derives::Id)]
#[max(MAX_ID)]
pub struct HeaderRuleId(std::num::NonZero<u32>);

#[derive(Clone, Copy, Debug)]
pub enum HeaderRule<'a> {
    Forward(ForwardHeaderRule<'a>),
    Insert(InsertHeaderRule<'a>),
    Remove(RemoveHeaderRule<'a>),
    RenameDuplicate(RenameDuplicateHeaderRule<'a>),
}

impl Readable<Schema> for HeaderRuleId {
    type Reader<'a> = HeaderRule<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        match schema[self] {
            HeaderRuleRecord::Forward(item) => HeaderRule::Forward(item.read(schema)),
            HeaderRuleRecord::Insert(item) => HeaderRule::Insert(item.read(schema)),
            HeaderRuleRecord::Remove(item) => HeaderRule::Remove(item.read(schema)),
            HeaderRuleRecord::RenameDuplicate(item) => HeaderRule::RenameDuplicate(item.read(schema)),
        }
    }
}