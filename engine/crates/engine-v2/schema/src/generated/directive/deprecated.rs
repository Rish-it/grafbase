//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
use crate::{prelude::*, StringId};
use readable::Readable;

#[derive(serde::Serialize, serde::Deserialize, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)]
pub struct DeprecatedDirectiveRecord {
    pub reason_id: Option<StringId>,
}

#[derive(Clone, Copy)]
pub struct DeprecatedDirective<'a> {
    schema: &'a Schema,
    item: DeprecatedDirectiveRecord,
}

impl<'a> DeprecatedDirective<'a> {
    #[allow(clippy::should_implement_trait)]
    pub fn as_ref(&self) -> &DeprecatedDirectiveRecord {
        &self.item
    }
    pub fn reason(&self) -> Option<&'a str> {
        self.as_ref().reason_id.map(|id| self.schema[id].as_ref())
    }
}

impl Readable<Schema> for DeprecatedDirectiveRecord {
    type Reader<'a> = DeprecatedDirective<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        DeprecatedDirective { schema, item: self }
    }
}

impl std::fmt::Debug for DeprecatedDirective<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("DeprecatedDirective")
            .field("reason", &self.reason())
            .finish()
    }
}