//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
use crate::{prelude::*, InputValueSet, RequiredFieldSetId, SchemaInputValue, SchemaInputValueId};
use readable::Readable;

#[derive(serde::Serialize, serde::Deserialize)]
pub struct AuthorizedDirectiveRecord {
    pub arguments: InputValueSet,
    pub fields_id: Option<RequiredFieldSetId>,
    pub node_id: Option<RequiredFieldSetId>,
    pub metadata_id: Option<SchemaInputValueId>,
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Hash, serde::Serialize, serde::Deserialize, id_derives::Id)]
#[max(MAX_ID)]
pub struct AuthorizedDirectiveId(std::num::NonZero<u32>);

#[derive(Clone, Copy)]
pub struct AuthorizedDirective<'a> {
    schema: &'a Schema,
    id: AuthorizedDirectiveId,
}

impl<'a> AuthorizedDirective<'a> {
    #[allow(clippy::should_implement_trait)]
    pub fn as_ref(&self) -> &'a AuthorizedDirectiveRecord {
        &self.schema[self.id]
    }
    pub fn id(&self) -> AuthorizedDirectiveId {
        self.id
    }
    pub fn arguments(&self) -> &'a InputValueSet {
        &self.as_ref().arguments
    }
    pub fn fields(&self) -> Option<&'a RequiredFieldSet> {
        self.as_ref().fields_id.map(|id| &self.schema[id])
    }
    pub fn node(&self) -> Option<&'a RequiredFieldSet> {
        self.as_ref().node_id.map(|id| &self.schema[id])
    }
    pub fn metadata(&self) -> Option<SchemaInputValue<'a>> {
        self.as_ref().metadata_id.as_ref().read(self.schema)
    }
}

impl Readable<Schema> for AuthorizedDirectiveId {
    type Reader<'a> = AuthorizedDirective<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        AuthorizedDirective { schema, id: self }
    }
}

impl std::fmt::Debug for AuthorizedDirective<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("AuthorizedDirective")
            .field("arguments", &self.arguments())
            .field("fields", &self.fields())
            .field("node", &self.node())
            .field("metadata", &self.metadata())
            .finish()
    }
}