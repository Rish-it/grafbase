//! ===================
//! !!! DO NOT EDIT !!!
//! ===================
//! Automatically generated by engine-v2-codegen from domain/schema.graphql
use crate::{
    generated::{Subgraph, SubgraphId},
    prelude::*,
    RequiredFieldSetId,
};
use readable::Readable;

#[derive(serde::Serialize, serde::Deserialize, Clone, Copy)]
pub struct FieldRequiresRecord {
    pub subgraph_id: SubgraphId,
    pub field_set_id: RequiredFieldSetId,
}

#[derive(Clone, Copy)]
pub struct FieldRequires<'a> {
    schema: &'a Schema,
    item: FieldRequiresRecord,
}

impl<'a> FieldRequires<'a> {
    #[allow(clippy::should_implement_trait)]
    pub fn as_ref(&self) -> &FieldRequiresRecord {
        &self.item
    }
    pub fn subgraph(&self) -> Subgraph<'a> {
        self.as_ref().subgraph_id.read(self.schema)
    }
    pub fn field_set(&self) -> &'a RequiredFieldSet {
        &self.schema[self.as_ref().field_set_id]
    }
}

impl Readable<Schema> for FieldRequiresRecord {
    type Reader<'a> = FieldRequires<'a>;
    fn read<'s>(self, schema: &'s Schema) -> Self::Reader<'s>
    where
        Self: 's,
    {
        FieldRequires { schema, item: self }
    }
}

impl std::fmt::Debug for FieldRequires<'_> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("FieldRequires")
            .field("subgraph", &self.subgraph())
            .field("field_set", &self.field_set())
            .finish()
    }
}